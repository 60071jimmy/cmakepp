
  function(assign lvalue operation rvalue)    
    ## is a value
    if("${rvalue}" MATCHES "^'.*'$")
      string_decode_delimited("${rvalue}" ')
      ans(value)
    elseif("${rvalue}" MATCHES "(^{.*}$)|(^\\[.*\\]$)")
      script("${rvalue}")
      ans(value)
    else()
      navigation_expression_parse("${rvalue}")
      ans(rvalue)
      list_pop_front(rvalue)
      ans(ref)

      if("${ARGN}" MATCHES "^\\(.*\\)$")
        ref_nav_get("${${ref}}" "&${rvalue}")
        ans(value)

        map_tryget(${value} ref)
        ans(value_ref)

        data("${ARGN}")
        ans(args)

        if(NOT value_ref)
    
          call("${ref}" ${args})
          ans(value)
      
        else()
          map_tryget(${value} property)
          ans(prop)
          map_tryget(${value} range)
          ans(ranges)

          if(NOT ranges)
            list_pop_front(args)
            list_pop_back(args)
            obj_member_call("${value_ref}" "${prop}" ${args})
            ans(value)

          else()
            map_tryget(${value} value)
            ans(callables)
            set(value)
            set(this "${value_ref}")
            foreach(callable ${callables})
              call("${callable}" ${args})
              ans(res)
              list(APPEND value ${res})
            endforeach()
          endif()
        endif()
      else()      
        ref_nav_get("${${ref}}" ${rvalue})
        ans(value)
      endif()
    endif()
    string_take(lvalue !)
    ans(exc)
    navigation_expression_parse("${lvalue}")
    ans(lvalue)
    list_pop_front(lvalue)
    ans(lvalue_ref)

    if("${operation}" STREQUAL "+=")
      ref_nav_get("${${lvalue_ref}}" "${lvalue}")
      ans(prev_value)
      set(value "${prev_value}${value}")
    endif()
   # message("ref_nav_set ${${lvalue_ref}} ${exc}${lvalue} ${value}" )
    ref_nav_set("${${lvalue_ref}}" "${exc}${lvalue}" "${value}")
    ans(value)
    set(${lvalue_ref} ${value} PARENT_SCOPE)
    return_ref(value)
  endfunction()