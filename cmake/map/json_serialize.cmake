function(json_serialize result value)
	set(recursive_args)
	# indent
	if(ARGN)
		set(list_to_array)
		list(FIND args "LIST_TO_ARRAY" idx)
		if(NOT ${idx} LESS 0)
			set(list_to_array true)
			set(recursive_args LIST_TO_ARRAY)
		endif()

		set(args ${ARGN})
		list(FIND args "INDENTED" idx)
		if(NOT ${idx} LESS 0)
			json_serialize(json "${value}")
			json_tokenize(tokens "${json}")
			json_format_tokens(indented "${tokens}")
			set(${result} "${indented}" PARENT_SCOPE)
			return()
		endif()	


	endif()


	# if value is empty return an empty string
	if(NOT value)
		set(${result} PARENT_SCOPE)
		return()
	endif()
	# if value is a not ref return a simple string value
	ref_isvalid("${value}" is_ref)
	if(NOT is_ref)
		json_escape(value "${value}")
		set(${result} "\"${value}\"" PARENT_SCOPE)
		return()
	endif()

	# get ref type
	# here map, list and * will be differantited
	# resulting object, array and string respectively
	set(ref_type)
	ref_gettype(${value} ref_type)
	if("${ref_type}" STREQUAL map)
		set(res)
		map_keys(${value} keys)
		foreach(key ${keys})
			map_get(${value} val ${key})	
			json_serialize(serialized_value "${val}" ${recursive_args} )				
			set(res "${res},\"${key}\":${serialized_value}")
		endforeach()
		string(LENGTH "${res}" len)
		if(${len} GREATER 0)
			string(SUBSTRING "${res}" 1 -1 res)
		endif()
		
			set(res "{${res}}")
	
		set(${result} "${res}" PARENT_SCOPE )
		return()
	elseif("${ref_type}" STREQUAL list)
		ref_get( ${value} lst)
		set(res "")
		foreach(val ${lst})
			json_serialize(serialized_value "${val}" ${recursive_args})
			set(res "${res},${serialized_value}")				
		endforeach()	

		string(LENGTH "${res}" len)
		if(${len} GREATER 0)				
			string(SUBSTRING "${res}" 1 -1  res)
		endif()
		set(res "[${res}]")
		set(${result} ${res} PARENT_SCOPE)
		return()
	else()			
		ref_get( ${value} ref_value)
		if(list_to_array)
			list_new(lst)
			ref_set(${lst} "${ref_value}")
			json_serialize(serialized_value "${lst}" ${recursive_args})
			set(${result} "${serialized_value}" PARENT_SCOPE)
			return()
		endif()

		json_escape(ref_value "${ref_value}")
		set(${result} "\"${ref_value}\"" PARENT_SCOPE)
		return()
	endif()
endfunction()