![cmakepp logo](https://raw.githubusercontent.com/toeb/cmakepp/master/logo.png "cmakepp logo")

## A CMake Enhancement Suite
[![Travis branch](https://img.shields.io/travis/toeb/cmakepp/master.svg)](https://travis-ci.org/toeb/cmakepp)
[![GitHub stars](https://img.shields.io/github/stars/toeb/cmakepp.svg?)](https://github.com/toeb/cmakepp/stargazers)
[![GitHub forks](https://img.shields.io/github/forks/toeb/cmakepp.svg)](https://github.com/toeb/cmakepp/network)
[![GitHub issues](https://img.shields.io/github/issues/toeb/cmakepp.svg)](https://github.com/toeb/cmakepp/issues)
[![biicode block](https://img.shields.io/badge/toeb%2Fcmakepp-DEV%3A0-yellow.svg)](https://www.biicode.com/toeb/cmakepp)  
[![Project Stats](https://www.ohloh.net/p/cmakepp/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/cmakepp)


# Installing

You have multiple options for install `cmakepp` the only prerequisite for all options is that cmake is installed with version `>=2.8.7`. 


* [Install by Console](#install_console) - Recommended
* Use the [Biicode Block](https://www.biicode.com/toeb/cmakepp)
* [Download a release](https://github.com/toeb/cmakepp/releases) and include it in your cmake script file - If you do not want to run the tests or have access to the single function files this option is for you
  - [Manually setup aliases](#install_aliases)
* Clone the repository and include `cmakepp.cmake` in your `CMakeLists.txt` (or other cmake script)

# Usage
Look through the files in the package.  Most functions will be commented and the other's usage can be inferred.  All functions are avaiable as soon as you include the cmakepp.cmake file.

# Testing
To test the code (alot is tested but not all) run the following in the root dir of cmakepp *this takes long :)*

``` 
cmake -P build/script.cmake 
```

# Feature Overview

`cmakepp` is a general purpose library for cmake.  It contains functionality that was missing in my opinion and also wraps some cmake functionality to fit to the style of this library.

* Features
  * [interactive cmake console](#icmake) (`cmake -P icmake.cmake`)
  * [lists](#lists) - common and usefull list and set operations.
    - [ranges](#ranges) range based access to lists
  * [maps](#maps) - map functions and utility functions (nested data structures for cmake)
    * graph algorithms 
    * serialization/deserialization
      * [json](#json)
      * [quickmap format](#quickmap) (native to cmake)
      * [xml](#xml)
  * [assign](#assign) universal assign ease of use for maps and functions 
  * [expression syntax](#expr).
      * `obj("{id:1,prop:{hello:3, other:[1,2,3,4]}}")` -> creates the specified object 
  * [eval](#eval) - evaluates cmake code and is the basis of many advanced features
  * [shell](#shell) - "platform independent" shell script execution
    * [aliases](#aliases) - platform independent shell aliases
    * [console](#console) - functions for console input and outputf
  * [filesystem](#filesystem) - directory and file functions with close relations to bash syntax
    * [mime types](#mimetypes) - mime type based file handling  
    * [compression/decompression](#compression) - compressing and decompressing tgz and zip files
  * [command execution](#execute) simplifying access to exectables using the shell tools.
  * [cmake tool compilation](#tooling) simple c/c++ tools for cmake
  * debugging
    * some convenience functions
    * `breakpoint()` - stops execution at specified location and allows inspection of cmake variables, execution of code (if `-DDEBUG_CMAKE` was specified in command line)
  * [version control systems](#vcs)
    * `hg()` convenience function for calling mercurial vcs
    * `git()` convenience function for calling git vcs
    * `svn()` convenience function for calling subversion vcs
    * utility methods for working with the different systems
  * [package search and retrieval](#packages) 
  * [cmake](#cmake) calling cmake from cmake.
  * [date/time](#datetime)
    * function for getting the correct date and time on all OSs
    * get milliseconds since epoch
  * [events](#events) allows registering event handlers and emitting events
  * [Windows Registry](#windowsregstry)
    * `reg()` shorthand for working with windows registry command line interface
    * read write manipulate registry values
    * query registry keys for values
  * [string functions](#stringfunctions) - advanced string manipulation 
  * [URIs](#uris) - Uniform Resource Identifier parsing and formatting  
  * [HTTP client](#http_client) - Perform HTTP/GET  HTTP/PUT request with pure cmake.
  * [user data](#userdata) - persists and retrieves data for the current user (e.g. allowing cross build/ script configuration)
  * functions
    * [returning values](#return)
    * define dynamic functions (without cluttering the namespace)
    * call functions dynamically (basically allowing `${functionName}(arg1 arg2 ...)` by typing  `call(${functionName}(arg1 arg2 ...))`)
    * set a variable to the result of functions `rcall(result = somefunction())`
    * lambda functions (a shorthand syntax for defining inline functions.  `(var1,var2)-> do_somthing($var1); do_something_else($var2)` 
    * import functions (from files, from string, ...)
  * [objects](#objects) - object oriented programming with prototypical inheritance, member functions
  * [process management](#process_management) - platform independent forking, waiting, controlling separate process from cmake 
  * [Targets](#targets)
    * [access to a list of all defined targets](#target_list)
    * easier access to target properties
    * 
  * [implementation notes](#implementation_notes)


*NOTE: the list is still incomplete*


# <a href="install_console"></a> Install by Console

For ease of use I provide you with simple copy paste code for your console of choice.  These scripts download the `install.cmake` file and execute it.  This file in turn downloads `cmakepp` and adds itself to your os (creating aliases and setting a environment variable - which allow you to use [icmake](#icmake) and [cmakepp cli](#cmake_cli) from the console).

*Bash*
```
#!bin/bash
wget https://raw.github.com/toeb/cmakepp/master/install.cmake && cmake -P install.cmake && rm install.cmake
```

*Powershell*
```
((new-object net.webclient).DownloadString('https://raw.github.com/toeb/cmakepp/master/install.cmake')) |`
out-file -Encoding ascii install.cmake; `
cmake -P install.cmake; `
rm install.cmake;


```


# <a href="install_aliases"></a> Manually setting up aliases



# <a name="cmake_cli"></a>cmakepp Console Client




# <a name="icmake"></a>Interactive CMake Shell

If you want to learn try or learn cmake and `cmakepp` you can use the interactive cmake shell by launching `cmake -P icmake.cmake` which gives you a prompt with the all functions available in `cmakepp` and cmake in general.

`icmake` allows you to enter valid cmake and also a more lazily you can neglect to enter the parentheses around functions e.g. `cd my/path ` -> `cd(my/path)`

Since console interaction is complicated with cmake and cmake itself is not very general purpose by design the interactive cmake shell is not as user friendly as it should be.  If you input an error the shell will terminate because cmake terminates. This problem might be addressed in the future (I have an idea however not the time to implement and test it)
Example:
```
> ./icmake.sh
icmake> cd /usr/tobi
"/usr/tobi"
icmake> pwd
"/usr/tobi"
icmake> @echo off
echo is now off
icmake> pwd
icmake> message("${ANS}")
/usr/tobi
icmake> @echo on
echo is now on
icmake> function(myfunc name)\  # <-- backslash allows multiline input
          message("hello ${name}") \
          obj("{name: $name}")\
          ans(person)\
          return(${person})\
        endfunction()
"/usr/tobi"                 # <-- the last output of any function is always repeated. 
icmake> myfunc Tobi
hello Tobi          # <-- output in function using message
{"name":"Tobi"}       # <-- json serialized return value of function
icmake> quit
icmake is quitting
> 
```


# Formalisms 

This section is incomplete and currently the functions described below do not all adhere to the formalisms. This will be adressed soon(ish)

To describe cmake functions I use formalisms which I found most useful they should be intuitively understandable but here I want to describe them in detail.



* `@` denotes character data
* `<string> ::= "\""@"\""` denotes a string literal
* `<regex> ::= /<string>/` denotes a regular expression (as cmake defines it)
* `<identifier> ::= /[a-zA-Z0-9_-]+/` denotes a identifier which can be used for definitions
* `<datatype> ::= "<" "any"|"bool"|"number"|""|"void"|""|<structured data> <?"...">">"` denotes a datatype the elipses denotes that multiple values in array form are described else the datatype can be `any`, `bool`, `number`, `<structured data>` etc.. 
* `<named definition> ::= "<"<identifier>">"`
* `<definition> ::= "<"<?"?"><identifier>|<identifier>":"<datatype>|<datatype>>">"`  denotes a possibly name piece of data. this is used in signatures and object descriptions e.g. `generate_greeting(<firstname:<string>> <?lastname:<string>>):<string>` specifies a function which which takes a required parameter called `first_name` which is of type `string` and an optional parameter called `lastname` which is of type `string` and returns a `string`
* `<structured data> ::= "{"<? <named definition> ...>"}"`
* `<void>` primitve which stand for nothing
* `<falseish>:"false"|""|"no"` cmake's false values (list incomplete)
* `<trueish>: !<falseish>`
* `<bool> ::= "true":"false"` indicates a well defined true or false value
* `<boolish> ::= <trueish>|<falsish>|<bool>`
* `<any> ::= <string>|<number>|<structured data>|<bool>|<void>`
* `<named function parameter>`
* `<function parameter> ::= <definition>|<named function parameter>`
* `<function definition> `
* ... @todo


# <a name="return"></a>Returning values

**Related Functions**

* `return(...)` overwritten CMake function accepting arguments which are returned
* `ans(<var>)` a shorthand for getting the result of a function call and storing it in var
* `clr([PARENT_SCOPE])` clears the `__ans` variable in current scope or in PARENT_SCOPE if flag is set.  

A CMake function can return values by accessing it's parent scope.  Normally one does the following to return a value
```
  function(myfunc result)
    set(${result} "return value" PARENT_SCOPE)
  endfunction()
  myfunc(res)
  assert(${res} STREQUAL "return value")
```
This type of programming causes problems when nesting functions as one has to return every return value that a nested function returns. Doing this automatically would cause alot of overhead as the whole scope would have to be parsed to see which values are new after a  function call.

A cleaner alternative known from many programming languages is using a return value. I propose and have implemented the following pattern to work around the missing function return values of cmake. 

```
  function(myfunc)
    return("return_value")
  endfunction()
  myfunc()
  ans(res)
  # the __ans var is used as a register
  assert(${__ans} STREQUAL "return value")
  assert(${res} STREQUAL "return value")
```

This is possible by overwriting CMakes default return() function with a macro. It accepts variables and  will call `set(__ans ${ARGN} PARENT_SCOPE)` so after the call to `myfunc()` the scope will contain the variable `__ans`. using the `ans(<var>)` function is a shorthand for `set(<var> ${__ans})`.  

### Caveats

* The returnvalue should immediately be consumed after the call to `myfunc` because it might be reused again somewhere else.
* functions which do  not call return will not set  `__ans` in their parent scope.  If it is unclear weather a function really sets `__ans` you may want to clear it before the function call using `clr()` 
* the overwrite for `return` has to be a macro, else accessing the `PARAENT_SCOPE` would be unfeasible. However macros caus the passed arguments to be re-evaluated which destroys some string - string containing escaped variables or  other escaped characters.  This is often a problem - therfore I have als added the `return_ref` function which accepts a variable name that is then returned. 

### Alternatives
* a stack machine would also be a possiblity as this would allow returning multiple values. I have decided using the simpler single return value appoach as it is possible to return a structured list or a map if multiple return values are needed.
 

##  <a href="assign"></a> Easy map handling with `assign()`

Using the map and list functions can be cumbersome. Therefore I have added a universal function called `assign()` It allows you to use statements known from other programming languages. 

The easiest way to illustrate the usefullness is by example:

*Examples*

```
## assign the string value 3 to x  - single quotes indicate a value
assign(x = '3') 
assert("${x}" EQUAL 3)

## assign a string containing spaces to x
assign(x = "'hello there!'") 
assert("${x}" STREQUAL "hello there!" )

## assign a literal to x - simplification of the above
assign(x "hello world" "how are you") # notice missing '='
assert("${x}" EQUALS "hello world" "how are you")

## assign the result of a function call to x
assign(x = string_length("abcde"))
assert("${x}" EQUAL 5)

## assign x the result of an expression
assign(x = "{id:1}")  # the strign {id:1} is parsed into a map
assertf("{x.id}" EQUAL 1)

## append a value to x
set(x)
assign(x[] = '1')
assign(x[] = '2')
assign(x[] = '3')
assign(x[] = '4')
assert(${x} EQUALS 1 2 3 4)

## reverse x
set(x 1 2 3 4)
assign(x = x[$:0:-1]) # read assign x at end to 0 in -1 increments to x
assert(${x} EQUALS 4 3 2 1)

## replace a range of x
set(x 1 2 3 4)
assign(x[1:2] = '5')
assert(${x} EQUALS 1 5 4)

## create a object path if it does not exist by prepending '!'
set(x)
assign(!x.y.z = '3')
assert_matches("{y:{z:3}}" "${x}")

...

```


## <a href="xml"></a> Naive Xml Deserialization

Xml Deserialization is a complex subject in CMake.  I have currently implemented a single naive implementation based on regular expressions which *does not* allow recursive nodes (ie nodes with the same tag being child of one another).



### Functions

* `xml_node(<name> <value> <attributes:object>)->{ tag:<name>, value:<value>, attrs:{<key>:<value>}}`  creates a naive xml node representation.
* `xml_parse_nodes(<xml:string> <tag:string>)-> list of xml_nodes`  this function looks for the specified tag in the string (matching every instance(no recursive tags)) it parses the found nodes attributes and value (innerXml). You can then use `nav()`, `map_get()` etc functions to parse the nodes




# <a name="targets"></a> Targets

## target_list and project_list

CMake as of version 2.8.7 does not support a list of all defined targets.
Therfore I overwrote all target adding functions `add_library`, `add_executable`, `add_custom_target`, `add_test`, `install` ... which now register the name of the target globally in a list. You can access this list by using the function `target_list()` which returns the list of known target names .  Note that only targets defined before the `target_list()`  call are known.  

I did the same thing for the  `project()` command.

## target debug functions

To quickly get an overview of how your target is configured write `print_target(<target_name>)` it will print the json representation of the target as a message.

To see how were all your targetes are type `print_project_tree` which will show the json representation of all your prrojects and targets.

## target property functions

accessing target properties made easier by the following functions

* `target_get(<target> <prop-name>)` returns the value of the target property
* `target_set(<target> <prop-name> [<value> ...])` sets the value of the target property
* `target_append(<target> <prop-name> [<value> ...])` appends the values to the current value of `<prop-name>` 
* `target_has(<target> <prop-name>)->bool` returns true iff the target has a property called `<prop-name>`


# <a name="datetime"></a> Date/Time

I have provided you with a functions which returns a datetime object to get the current date and time on all OSs including windows. It uses file(TIMESTAMP) internally so the resolution is 1s.  It would be possible to enhance this functionality to included milliseconds however that is more system dependent and therefore a decieded against it.  

`datetime()` currently only returns the local time. extending it to return UTC would be easy but I have not yet needed it

In the future date time arithmetic might be added

## Functions

* `datetime()` returns the current date time as a `<datetime object>`
* `<datetime object>` an object containing the following fields: `yyyy` `MM` `dd` `hh` `mm` `ss`




# <a name="eval"></a> Eval

`eval()` is one of the most central functions in cmakepp.  It is the basis for many hacks an workarounds which cmakepp uses to enhance the scripting language.

`eval` is not native to cmake (native eval would greatly increase the performance of this library) 

Internally it works by writing cmake script to a file and including it

## Functions

* `eval(code)` executes the specified code. `set(x z PARENT_SCOPE)` is not however you can return a value. 

## Examples

Defining a Function and calling it

```
eval("
function(say_hello name)
  return(\"hello \${name}!\") # note: escape cmake double quotes and dolar sign in front of vars
endfunction()
")

say_hello(Tobias)
ans(res)
assert("${res}" STREQUAL "hello Tobias!")

```

dynamically calling a function

```
# three handlers
function(handler1 a)
  return("handler1 ${a}")
endfunction()
function(handler2 a)
  return("handler2 ${a}")
endfunction()
function(handler3 a)
  return("handler3 ${a}" )
endfunction()
# list of handlers
set(handlers handler1 handler2 handler3)
# intialize result
set(results)
# set input value
set(val 3)
foreach(handler ${handlers})
  # dynamically call handler
  eval("${handler}(${val})")  
  ans(res)
  # append result to list
  list(APPEND results ${res})
endforeach()
# check if list equals expected results
assert(EQUALS ${results} "handler1 3" "handler2 3" "handler3 3")
```


# <a name="vcs"></a> Version Control System utilities

Working with the version control system can be a crutch in CMake. Therefore I created helpers and convenience functions which allow simple usage. Consider the following CMake code which you would have to use to clone cutil's git repository

```

find_package(Git)
if(NOT GIT_FOUND)
  message(FATAL_ERROR "Git is required!")
endif()
set(cutil_base_dir "/some/path")
if(NOT IS_DIRECTORY "${cutil_base_dir}")
  if(EXISTS "${cutil_base_dir}")
    message(FATAL_ERROR "${cutil_base_dir} is a file")
  endif()
  file(MAKE_DIRECTORY "${cutil_base_dir}")
endif()
execute_process(COMMAND "${GIT_EXECUTABLE}" clone "https://github.com/toeb/cutil.git" "${cutil_base_dir}" RESULT_VARIABLE error ERROR_VARIABLE error)
if(error)
  message(FATAL_ERROR "could not clone https:// .... because "${error}")
endif()
execute_process(COMMAND "${GIT_EXECUTABLE}" submodule init WORKING_DIRECTORY "${cutil_base_dir}" RESULT_VARIABLE error)
if(error)
  message(FATAL_ERROR "could not init submodules because "${error}")
endif()
execute_process(COMMAND "${GIT_EXECUTABLE}" submodule update --recursive WORKING_DIRECTORY "${cutil_base_dir}" RESULT_VARIABLE error)
if(error)
  message(FATAL_ERROR "could not update submodules")
endif()
```

Using convenience functions this distills down to

```
# set the current directory to ${cutil_base_dir} and creates it if it does not exist
cd(${cutil_base_dir} --create) 
# automatically fails on error with error message
git(clone "http://github.com/toeb/cutil.git" .)
git(submodule init)
git(submodule update --recursive)
```

So alot of unecessary repeating code can be omitted.  

## Git

### Functions

* `git()` function for git command line client with same usage, except `git ...` -> `git(...)` (created using wrap_executable)
* `git_base_dir([<unqualified path>]) -> <qualified path>` returns the repositories base directory
* `git_dir([<unqualified path>]) -> <qualified path>` returns the repositories .git directory 
* `git_read_single_file(<repository uri> <branch|""> <repository path>) -> <content of file>` reads a file from a remote repository
* `git_remote_exists(<potential repository uri>) -> bool` returns true if the uri points to a valid git repository
* `git_remote_refs(<repository uri>) -> <remote ref>[]` returns a list of `<remote ref>` objects
* `<remote ref>` a objects containing the following fields
  * `type : HEAD | <branch name>` -> the type of ref
  * `name : <string>` -> the name of the ref 
  * `revision: <hash>` -> the revision associated with the ref
* `git_repository_name() -> <string>`  returns the name of the repository. 

## Subversion

* `svn()` function for svn command line client with same usage, except `svn ...` -> `svn(...)` (created using wrap_exetuable)
* `svn_get_revision(<uri>)` returns the revision number of the specifed `<uri>`
* `svn_info(<uri>)-><svn info>` returns an object containing the following fields
  - path: specified relative path
  - revision: revision number
  - kind
  - url: uri
  - root: repository root
  - uuid
* ...

## Mercurial

* `hg()` function for mercurial command line client with same usage except `hg ...` -> `hg(...)`
* ...



# <a name="shell"></a> Shell


## <a name="console"></a> Console Interaction

Since I have been using cmake for what it has not been created (user interaction) I needed to enhance console output and "invent" console input.  using shell magic it became possible for me to read input from the shell during cmake execution.  You can see it in action in the interactive cmake shell `icmake` (start it by running cmake -P icmake.cmake) Also I was missing a way of writing to the shell without appending a linebreak - using `cmake -E echo_append` it was possibly for me to output data without ending the line.  

### Enhanced `message` function

When working with recursive calls and complex build processes it is sometimes useful to allow output to be indented which helps the user understand the output more easily.

Therfore I extended the `message` function to allow some extra flags which control  indentation on the console. The indentation functionality can also be controlled using the `message_indent*` functions.  Take the following example:

*Example*

```
function(add_some_lib)
  message(PUSH_AFTER "adding somelib")
  ...
  message(POP_AFTER "done")
endfunction()
function(add_my_target)
  message(PUSH_AFTER "adding my target")
  ...
  message("gathering sources")
  add_some_lib()
  ...
  message(POP_AFTER "complete")
endfunction()

message("condiguring")
add_some_lib()
add_my_target()
message("finished")
```

*Output*:
```
adding somelib
adding my target
  gathering sources
  adding somelib
    done
  complete
finished

```

### Functions

* `read_line()-><string>` prompts the user to input text. waiting for a line break. the result is a string containing the line read from console
* `echo_append([args ...])` appends the specifeid arguments to stdout without a new line at the end
* `echo([args ...])` appends the specified arguments to stdout and adds a new line
* `message`
* `message(<flags?> <string> )` enhanced message function (with indentation)
  - `PUSH` 
* `print(str)` prints the specified string to console (default is stderr...) using `_message` 
* `message_indent_level():<uint>` returns the level of indentation
* `message_indent_get():<>` returns the indentation string `string_repeat("  " ${n})` (two spaces times the indentation level)
* `message_indent_push(<level?:[+-]?<uint>>):<uint>`  pushes the specified level on to the indentation stack making it the current level. if the number is preceded by `+` or `-` the value is relative to the current indentation level.
* `message_indent_pop():<uint>` removes the last level from the stack and returns the new current level
* `message_indent(<string>)` writes the string to the console indenting it
 


## <a name="aliases"></a> Aliases

Since I like to provide command line tools based on cmake (using cmake as a cross plattform shell in some sense) I also needed the ability to create aliases in a platform independent way. Even though I have a couple of limitations I have found a good posibillity to do what I want. See the following example of how to create a cross platform way to dowload a file:

```
fwrite("datetimescript.cmake" "
include(\${cmakepp_base_dir}/cmakepp.cmake)
datetime()
ans(dt)
json_print(${dt})
")
path("datetimescript.cmake")
ans(fullpath)
alias_create("my_datetime" "cmake -P \"${fullpath}\"")

```

After executing the above code the current shell will have access to the my_datetime alias and the following call will be possible without any reference to cmake - in this case the cmake command is called of course but `create_alias` can be used to create a alias for any type of executable as bash and windows commandprompts do not differ too much in this respect

```
shell> my_datetime
{
 "yyyy":"2014",
 "MM":"11",
 "dd":"27",
 "hh":"22",
 "mm":"51",
 "ss":"32",
 "ms":"0"
}
```

### Functions and Datatypes

* `alias_create(<alias name> <shell code>)`  - under windows this registers a directory in the users PATH variable. In this directory batch files are created. Under Unix the .bashrc is edited and a alias is inserted.
  - Not implemented yet:
    + `alias_exists`
    + `alias_remove`
    + `alias_list`





# <a name="cmake"></a> CMake Command

Like the version control system I also wrappend cmake itself into an easy to use function called `cmake(...)`  this allows me to start subinstances of cmake

# <a name="tooling"><a> CMake Tooling

To create tools for CMake (wherever something cannot be done with cmake) I created a very simple function called `compile_tool(<name> <src>)`

This function does the following tasks

* creates a cmake project with CMakeLists file and a single executable target the target has a single source file (whatever you put in `<src>`)
* compiles this tool (the tool may only use standard headers currently)
* caches the compiled tool so that it is not recompiled unless src changes
* creates a wrapper function in cmake called `<name>` which evaluates the cmake code that the command outputs
* arguments passed to wrapper `<name>` are passed along as command line args for the main method.

*note*: this will change in the future as it is a very naive implementation.


## Example

Because cmake does not support getting the current time in milliseconds since the epoch the need arose for me to compile custom code. This code is the example for using the `compile_tool(..)` function.

```
## returns the number of milliseconds since epoch
function(millis)
  # initializer function pattern - because compile_tool
  # redefines the millis function this code is only executed once
  compile_tool(
    # first argument: the name of the tool 
    # and the function name to be defined   
    millis 
    # second argument: the source code to compile
    # with default compiler/generator under you system    
    "
    #include <iostream>
    #include <chrono>
    int main(int argc, const char ** argv){
     // use chrono to get the current time in milliseconds
     auto now = std::chrono::system_clock::now();
     auto duration = now.time_since_epoch();
     auto millis = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();
     // return cmake code which is to be evaluated by command wrapper
     // set_ans will let the eval function return the specified value
     std::cout<< \"set_ans(\" << millis << \")\";
     return 0;
    }
    "
    )
  ## compile_tool has either failed or succesfully defined the function
  ## wrapper called millis
  millis(${ARGN})
  return_ans()
endfunction()

# now you can use millis
millis()
ans(ms)
message("time since epoch in milliseconds: ${ms}")
```



# <a name="lists"></a> List and Set Functions

CMake's programming model is a bit ambigous but also very simple. Every variable can be interpreted as a list and a string.  This duality makes everything a little complex because you can never know what which of both is meant. However if you tell the client of you CMake functions what you expect  you start to programm by convention which is very usefull in a very simple dynamic language like CMake Script.

## Datatypes and Functions

* `<list>  := <string ...>`  a variable in cmake which semicolon separated strings.
* `<predicate> := (<any>):<bool>` a function which takes a single arg and returns a truth value 
* `<list ref> :: <list&>` the name of the variable that contains a list
* `<set> := <list>` a set is a list which contains only unique elements. You can create a set by using CMake's `list(REMOVE_DUPLICATES thelist)` function.
* `index_range(<lo:int> <hi:int>):<int...>` returns a list of indices which includes `lo` but excludes `hi`.
  - `index_range(3 5)`  -> `3;4`
* `list_all(<list ref> <predicate>):<bool>` returns true iff predicate evaluates to true for all elements of the list
* `list_any(<list ref> <predicate>):<bool>` returns true iff predicate evaluates to true for for at least one element of the list.
* `list_at(<list ref> <indices:<int...>>):<list>` returns all elements of the list which specified by their indices. Repetions are allowed.
  - `list_at(thelist 1 3 0 0)` -> `b;d;a;a` if the list contains the alphabet
* `list_combinations(<list ref...>):<list>` returns all possible combinations of all specified lists
  - `list_combinations(bin bin bin)` -> `000;001;010;011;100;101;110;111` if `bin = 0;1`   
* `list_contains(<list ref> <args:any...>):<bool>` returns true if list contains all args specified
* `list_count(<list ref> <predicate>):<int>` returns the number of elements for which the specified predicate evalautes to true
* `list_difference(<list ref> <predicate>):<list>`
* `list_equal(<lhs:<list ref>> <rhs:<list ref>>):<bool>` 
* `list_erase(<list ref> <start_index> <end_index>):<void>` removes the specified range from the list
* `list_erase_slice(<list ref> <start_index> <end_index>):<list>` removes the specified range from the list and returns the removed elements
* `list_except(<lhs:<list ref>> <rhs:<list ref>>):<list>` returns the elements of lhs which are not in rhs
* `list_extract(<list ref> <any&...>):<list>` removes the first n elements of the list and returns the rest of the list.  
* `list_extract_any_flag`
* `list_erase_slice(<list ref> <startindex:<int>> <endindex:<int>> <args:<any...>>):<list>` replaces the specified range of the list with the passed varargs.  returns the elements which were removed


## Caveats

* some list functions wrap default cmake behaviour. That means that they are slower.  So in some cases where you are doing alot of function calling you should use the default cmake functions to make everything faster.


### Range based List access

Ranges are an awesome way of accessing lists. Take for example the following task: `return the last element, the 3rd element and elements 8 to 6` using cmake this can become complicated having to check list lengths and compiling the list of indices needed.  However it is easier if you write `list_range_get(mylist $,2,8:6:-1)`


#### Functions and Datatypes

* `list_range_get()`
* `list_range_indices()`
* `list_range_partial_write()`
* `list_range_remove()`
* `list_range_replace()`
* `list_range_set()`
* `list_range_try_get()`

## Datatypes and Functions

# <a name="shell"></a> Shell Functions

# <a name="expr"></a> Expression Syntax

# <a name="implementation_notes"></a> Implementation Notes


## <a href="initializer_function"></a> Initializer function

If you want to execute code only once for a function (e.g. create  a datastructure before executing the function or finding a package) you can use the Initializer Pattern. Which redefines the function itside itself after executing one time code. 

```
function(initalizing_function)
  # initialization code
  function(initializing_function)
    # actual function code
  endfunction()
  initializing_function(${ARGN})
  return_ans() # forwards the returned value
endfunction()
```

*Example*
```
function(global_counter)
  ref_set(global_counter_ref 0)
  function(global_counter)
    ref_get(global_counter_ref)
    ans(count)
    math(EXPR count "${count} + 1")
    ref_set(global_counter_ref ${count})
    return(${count})
  endfunction()
endfunction()
```


## <a href="pass_by_ref"></a> Passing By Ref



Passing a variable to a function can be done by value and or by reference.
```
function(byval var)
  message("${var}")
endfunction()

function(byref ref)
  message("${${ref}}")
endfunction()

set(some_val 3)

byval(${some_val}) # prints 3
byref(some_val) # prints 3

```

Passing 'by ref' is possible because a function inherits its parent scope. The problem with passing by ref is the following:

```
function(byref ref)
  set(val 1)
  message("${${ref}} ${val}")
endfunction()

set(val 2)
byref(val) #expected to print "2 1" but actually prints "2 2"
```

The `val` of the function's scope overwrites the `val` of the parent scope.
The workaround I chose was to mangle all variable names starting with a `__<function_name>_<varname>`  (however special care has to be taken with recursive functions). This stops accidental namespace collisions:

```
function(byref __byref_ref)
  set(__byref_val 1)
  message("${${__byref_ref}} ${__byref_val}")
endfunction()

```

So If you read some of the functions and see very strange variable names this is the explanation.




... more coming soon