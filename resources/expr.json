{
  "name":"oo-cmake",
  "parsers":{
    "token":"ast_parse_token",
    "any":"ast_parse_any",
    "sequence":"ast_parse_sequence",
    "list":"ast_parse_list",
    "empty":"ast_parse_empty",
    "end_of_stream":"ast_parse_end_of_stream"
  },
  "evaluators":{
    "string":"expr_compile_string",
    "number":"expr_compile_number",
    "cmake_identifier":"expr_compile_cmake_identifier",
    "call":"expr_compile_call",
    "expression":"expr_compile_expression",
    "bind":"expr_compile_bind",
    "indexation":"expr_compile_indexation",
    "identifier":"expr_compile_identifier",
    "list":"expr_compile_list",
    "new_object":"expr_compile_new_object",
    "assignment":"expr_compile_assignment",
    "parentheses":"expr_compile_parentheses",
    "null_coalescing":"expr_compile_coalescing"
  },
  "root_definition":"expression",
  "definitions":{
    "expression":{
      "node":"true",
      "parser":"list",
      "begin":"value",
      "element":"operation",
      "end":"end_of_expression"
    },
    "value":{
      "parser":"any",
      "any":[
        "assignment",
        "parentheses",
        "literal",
        "lvalue",
        "list",
        "new_object"
      ]
    },
    "lvalue":{
      "parser":"any",
      "any":[
        "cmake_identifier",
        "identifier",
        "indexation"
      ]
    },
    "operation":{
      "parser":"any",
      "any":[
        "assignment",
        "identifier",
        "call",
        "bind",
        "indexation",
        "null_coalescing"
      ]
    },
    "null_coalescing":{
      "node":"true",
      "parser":"sequence",
      "sequence":[
        "query",
        "query",
        "expression"
      ]
    },
    "query":{
      "parser":"token",
      "regex":"[?]"
    },  
    "parentheses":{
      "node":"true",
      "parser":"sequence",
      "sequence":[
        "paren_open",
        "expression",
        "paren_close"
      ]
    },
    "assignment":{
      "node":"true",
      "parser":"sequence",
      "sequence":[
        "lvalue",
        "equals",
        "expression"
      ]
    },
    "indexation":{
      "node":"true",
      "parser":"sequence",
      "sequence":[
        "bracket_open",
        "expression",
        "bracket_close"
      ]
    },
    "bind":{
      "node":"true",
      "parser":"sequence",
      "sequence":[
        "period"
      ]
    },
    "new_object":{
      "node":"true",
      "parser":"sequence",
      "sequence":[
        "key_value_list"
      ]

    },
    "key_value_list":{
      "parser":"list",
      "node":"true",
      "begin":"brace_open",
      "end":"brace_close",
      "element":"key_value",
      "separator":"comma"
    },
    "call":{
      "parser":"list",
      "begin":"paren_open",
      "element":"expression",
      "separator":"comma",
      "end":"paren_close",
      "node":"true"
    },
    "end_of_expression":{
      "parser":"any",
      "peek":"true",
      "any":[
        "comma",
        "paren_close",
        "semicolon",
        "bracket_close",
        "brace_close",
        "end_of_stream"
      ]
    },
    "list":{
      "parser":"list",
      "begin":"bracket_open",
      "end":"bracket_close",
      "separator":"comma",
      "element":"expression",
      "node":"true"
    },
    "new_keyword":{
      "parser":"token",
      "regex":"new"
    },
    "key_value":{
      "parser":"sequence",
      "node":"true",
      "sequence":[
        "key",
        "colon",
        "expression"
      ]
    },
    "key":{
      "parser":"any",
      "any":[
        "identifier",
        "string"
      ]
    },
    "identifier":{
      "parser":"token",
      "node":"true",
      "regex":"([a-zA-Z_-][a-zA-Z0-9_\\-]*)"
    },
    "cmake_identifier":{
      "parser":"sequence",
      "node":"true",
      "sequence":[
        "dollar",
        "identifier"
      ]
    },
    "end_of_stream":{
      "parser":"end_of_stream"
    }, 
    "nothing":{
      "parser":"empty",
      "empty":"true"
    },
    "colon":{
      "parser":"token",
      "regex":"[:]"
    },
    "semicolon":{
      "parser":"token",
      "regex":"[;]"
    },
    "period":{
      "parser":"token",
      "regex":"[\\.]"
    },
    "dollar":{
      "parser":"token",
      "regex":"[\\$]"
    },
    "equals":{
      "parser":"token",
      "regex":"="
    },
    "literal":{
      "parser":"any",
      "any":[
        "string",
        "number"
      ]
    },
    "paren_close":{
      "parser":"token",
      "regex":"[)]"
    },
    "paren_open":{
      "parser":"token",
      "regex":"[(]"
    },
    "bracket_close":{
      "parser":"token",
      "regex":"]"
    },
    "bracket_open":{
      "parser":"token",
      "regex":"[\\[]"
    },
    "brace_close":{
      "parser":"token",
      "regex":"[}]"
    },
    "brace_open":{
      "parser":"token",
      "regex":"[{]"
    },
    "comma":{
      "parser":"token",
      "match":","
    },
    "string":{
      "parser":"token",
      "node":"true",
      "regex":"'(([^']|\\')*)'",
      "replace":"1"   
    },
    "number":{
      "parser":"token",
      "node":"true",
      "regex":"([1-9][0-9]*)"
    },
    "white_space":{
      "parser":"token",
      "ignore_token":"true",
      "regex":"[\r\n\t ]+"
    }

  }
}